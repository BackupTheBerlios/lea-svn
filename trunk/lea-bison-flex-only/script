#!/bin/lea
/*
 * \file script
 * \brief Simple sample script that show the supported structures in lea (parser)
 *
 * \author Eduardo Robles Elvira <edulix@iespana.es>
 *
 * This is part of Lea. Lea is free software; 
 * you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * Lea is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with nbsmtp; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * See COPYING for details.
 */

 //efef
  
prog prueba
	cons
		MAX:45341
	var
		a, b, i  : entero
		c, d     : fichero de real
		continue : logico
	prin
		a, b, i  := 3, 5, 0
		continue := verdadero
		intialise_two_files(c, d)
		a[5].b := "hola"
		
		mientras continue y i < MAX
			i:=i+1
			
			leer a
			leer b
			
			si (a = b):
				got_two_equal_values(f, g, a, b, l)
			| (a <= arithmetic_med_of_two_values_from_two_files(f, g, b)):
				mientras llamada_a_un_func_o_proc(45, 4., a)
					a, b := b+1, a-1
				fm
			| (a > b - 1):
				escribir a, b-1
			| otras:
				nula
			fsi
			
			desde (a:=1) hasta (5)
				leer a
			fd
		fm
	fin

proc intialise_two_streams(entsal f, g: fichero de real)
	prin
		abrir("file_of_reals_1", ent, f); abrir("file_of_reals_2", ent, g)
	fin

func arithmetic_med_of_two_values_from_two_files(f, g: fichero de entrada de real) dev (b: entero)
	var
		i, j: real
	prin
		leer(i, f); leer(j, g)
		b := truncar((i + j) / 2)
	fin

proc my_procedure(ent b, c: flujo de entrada de entero, d: cadena; sal e:flujo de salida de caracter; entsal f:flujo de entrada y salida de real, g:tabla[5] de logico)
	tipos
		a: tabla[5,4] de entero
		a: (V,H)
		df: reg
			v: entero
		freg
	prin
		a := {1, 2, 3}
		a[3] := 2
		llamada_a_un_func_o_proc(45, 4., a)
		escribir pi
		
		si (a = b): leer a
		| ( a <= llamada_a_un_func_o_proc(45, 4., a) ):
			mientras llamada_a_un_func_o_proc(45, 4., a)
				a, b := b+1, a-1
			fm
		| (a > b - 1) :
			escribir a, b-1
		| otras:
			nula
		fsi
		
		desde (a:=1) hasta 5
			leer pi
		fd
	fin